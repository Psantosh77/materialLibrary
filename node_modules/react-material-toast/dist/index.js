'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rcNotification = require('rc-notification');

var _rcNotification2 = _interopRequireDefault(_rcNotification);

var _Toast = require('./Toast');

var _Toast2 = _interopRequireDefault(_Toast);

require('./index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var showToast = function showToast(notification, content, options, type) {
  var key = guid();
  var duration = options.duration,
      maxCount = options.maxCount,
      closable = options.closable;

  var onClost = function onClost() {
    notification.component.remove(key);
    if (options.cb) {
      options.cb();
    }
  };
  removeMax(notification, maxCount);
  notification.notice({
    content: _react2.default.createElement(
      _Toast2.default,
      { type: type, closable: closable, onClose: onClost, duration: duration },
      content
    ),
    key: key,
    duration: duration === 0 ? null : duration,
    onClose: function onClose() {
      if (options.cb) {
        options.cb();
      }
    }
  });
  return key;
};

var removeMax = function removeMax(notification, maxCount) {
  var toasts = notification.component.state.notices;
  if (toasts.length >= maxCount) {
    notification.component.remove(toasts[0].key);
  }
};

var guid = function guid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0,
        v = c === 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
};

exports.default = {
  new: function _new(_ref) {
    var _ref$place = _ref.place,
        place = _ref$place === undefined ? 'topLeft' : _ref$place,
        _ref$maxCount = _ref.maxCount,
        maxCount = _ref$maxCount === undefined ? 8 : _ref$maxCount,
        _ref$duration = _ref.duration,
        duration = _ref$duration === undefined ? 4 : _ref$duration,
        _ref$closable = _ref.closable,
        closable = _ref$closable === undefined ? true : _ref$closable;

    if (['topLeft', 'topRight', 'bottomLeft', 'bottomRight'].findIndex(function (item) {
      return item === place;
    }) < 0) {
      console.warn('react-material-toast: \u65E0\u6CD5\u8BC6\u522B\u7684\u4F4D\u7F6E\uFF1A' + place);
      place = 'topLeft';
    }
    var Toast = {
      notification: null,
      remove: function remove(key) {
        this.notification.component.remove(key);
      },
      removeAll: function removeAll() {
        var toasts = this.notification.component.state.notices;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = toasts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var toast = _step.value;

            this.notification.component.remove(toast.key);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      },
      _show: function _show(content, type, cb) {
        return showToast(this.notification, content, { maxCount: maxCount, duration: duration, closable: closable, cb: cb }, type);
      },
      success: function success(content, cb) {
        return this._show(content, 'success', cb);
      },
      error: function error(content, cb) {
        return this._show(content, 'error', cb);
      },
      info: function info(content, cb) {
        return this._show(content, 'info', cb);
      },
      warning: function warning(content, cb) {
        return this._show(content, 'warning', cb);
      }
    };
    _rcNotification2.default.newInstance({ prefixCls: place + '-notification' }, function (n) {
      return Toast.notification = n;
    });
    return Toast;
  }
};