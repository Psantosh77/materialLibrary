{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _rcNotification = require('rc-notification');\n\nvar _rcNotification2 = _interopRequireDefault(_rcNotification);\n\nvar _Toast = require('./Toast');\n\nvar _Toast2 = _interopRequireDefault(_Toast);\n\nrequire('./index.css');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar showToast = function showToast(notification, content, options, type) {\n  var key = guid();\n  var duration = options.duration,\n      maxCount = options.maxCount,\n      closable = options.closable;\n\n  var onClost = function onClost() {\n    notification.component.remove(key);\n\n    if (options.cb) {\n      options.cb();\n    }\n  };\n\n  removeMax(notification, maxCount);\n  notification.notice({\n    content: _react2.default.createElement(_Toast2.default, {\n      type: type,\n      closable: closable,\n      onClose: onClost,\n      duration: duration\n    }, content),\n    key: key,\n    duration: duration === 0 ? null : duration,\n    onClose: function onClose() {\n      if (options.cb) {\n        options.cb();\n      }\n    }\n  });\n  return key;\n};\n\nvar removeMax = function removeMax(notification, maxCount) {\n  var toasts = notification.component.state.notices;\n\n  if (toasts.length >= maxCount) {\n    notification.component.remove(toasts[0].key);\n  }\n};\n\nvar guid = function guid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\n\nexports.default = {\n  new: function _new(_ref) {\n    var _ref$place = _ref.place,\n        place = _ref$place === undefined ? 'topLeft' : _ref$place,\n        _ref$maxCount = _ref.maxCount,\n        maxCount = _ref$maxCount === undefined ? 8 : _ref$maxCount,\n        _ref$duration = _ref.duration,\n        duration = _ref$duration === undefined ? 4 : _ref$duration,\n        _ref$closable = _ref.closable,\n        closable = _ref$closable === undefined ? true : _ref$closable;\n\n    if (['topLeft', 'topRight', 'bottomLeft', 'bottomRight'].findIndex(function (item) {\n      return item === place;\n    }) < 0) {\n      console.warn('react-material-toast: \\u65E0\\u6CD5\\u8BC6\\u522B\\u7684\\u4F4D\\u7F6E\\uFF1A' + place);\n      place = 'topLeft';\n    }\n\n    var Toast = {\n      notification: null,\n      remove: function remove(key) {\n        this.notification.component.remove(key);\n      },\n      removeAll: function removeAll() {\n        var toasts = this.notification.component.state.notices;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = toasts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var toast = _step.value;\n            this.notification.component.remove(toast.key);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      },\n      _show: function _show(content, type, cb) {\n        return showToast(this.notification, content, {\n          maxCount: maxCount,\n          duration: duration,\n          closable: closable,\n          cb: cb\n        }, type);\n      },\n      success: function success(content, cb) {\n        return this._show(content, 'success', cb);\n      },\n      error: function error(content, cb) {\n        return this._show(content, 'error', cb);\n      },\n      info: function info(content, cb) {\n        return this._show(content, 'info', cb);\n      },\n      warning: function warning(content, cb) {\n        return this._show(content, 'warning', cb);\n      }\n    };\n\n    _rcNotification2.default.newInstance({\n      prefixCls: place + '-notification'\n    }, function (n) {\n      return Toast.notification = n;\n    });\n\n    return Toast;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}